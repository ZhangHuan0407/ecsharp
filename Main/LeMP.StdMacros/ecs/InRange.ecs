using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loyc;
using Loyc.Syntax;
using Loyc.Collections;
using static LeMP.StandardMacros;
using S = Loyc.Syntax.CodeSymbols;

namespace LeMP.ecs
{
	partial class StandardMacros
	{
		[LexicalMacro("x in lo..hi; x in lo...hi; x in ..hi; x in lo..._; x in range",
			"Converts an 'in' expression to a normal C# expression using the following rules "+
			"(keeping in mind that the EC# parser treats `..<` as an alias for `..`):\n"+
			"1. `x in _..hi` and `x in ..hi` become `x.IsInRangeExcl(hi)`\n"+
			"2. `x in _...hi` and `x in ...hi` become `x.IsInRangeIncl(hi)`\n"+
			"3. `x in lo.._` and `x in lo..._` become simply `x >= lo`\n"+
			"4. `x in lo..hi` becomes `x.IsInRangeExcludeHi(lo, hi)`\n"+
			"5. `x in lo...hi` becomes `x.IsInRange(lo, hi)`\n"+
			"6. `x in range` becomes `range.Contains(x)`\n"+
			"The first applicable rule is used.", "'in")]
		public static LNode In(LNode node, IMacroContext context)
		{
			if (context.Parent.Calls(S.From) || context.Parent.Calls(S.Join))
				return null; // ignore 'in' inside LINQ expression

			matchCode(node) {
			case $x in $range:
				LNode parens;
				range = range.WithoutAttrNamed(S.TriviaInParens, out parens);
				if (parens == null) {
					matchCode(range) {
						case $lo..$hi:
							if (lo.IsIdNamed(__))
								return quote($x < $hi);
							else if (hi.IsIdNamed(__))
								return quote($x >= $lo);
							else
								return quote($x.IsInRangeExcludeHi($lo, $hi));
						case ..$hi:
							return quote($x < $hi);
						case $lo...$hi:
							if (lo.IsIdNamed(__))
								return quote($x <= $hi);
							else if (hi.IsIdNamed(__))
								return quote($x >= $lo);
							else
								return quote($x.IsInRange($lo, $hi));
						case ...$hi:
							return quote($x <= $hi);
					}
				}
				return quote($range.Contains($x));
			}
			return null;
		}
	}
}
