<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeMP</name>
    </assembly>
    <members>
        <member name="T:LeMP.Compiler">
            <summary>A class that helps you invoke <see cref="F:LeMP.Compiler.MacroProcessor"/> on
            on a set of source files, given a set of command-line options.</summary>
            <remarks>
            This class helps you process command-line options (see <see cref="M:LeMP.Compiler.ProcessArguments(System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean,System.Collections.Generic.IList{System.String})"/>), 
            complete <see cref="T:LeMP.InputOutput"/> objects based on those options (see 
            <see cref="M:LeMP.Compiler.CompleteInputOutputOptions"/>), and add macros from Assemblies 
            (<see cref="M:LeMP.Compiler.AddMacros(System.Reflection.Assembly)"/> and <see cref="M:LeMP.Compiler.AddStdMacros"/>). When everything
            is set up, call <see cref="M:LeMP.Compiler.Run"/>.
            </remarks>
        </member>
        <member name="M:LeMP.Compiler.ProcessArguments(System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>Processes command-line arguments to build a BMultiMap and 
            sends those options to the other overload of this method.</summary>
            <param name="args">Arg list from which to extract options. **NOTE**:
            discovered options are removed from the list. This parameter 
            cannot be an array.</param>
            <param name="warnAboutUnknownOptions">Whether this method should
            call <see cref="M:LeMP.Compiler.WarnAboutUnknownOptions(Loyc.Collections.BMultiMap{System.String,System.String},Loyc.IMessageSink,System.Collections.Generic.IDictionary{System.String,Loyc.Pair{System.String,System.String}})"/> for you.</param>
            <param name="autoOpenInputFiles">Whether to open input files 
            for you by calling <see cref="M:LeMP.Compiler.OpenSourceFiles(Loyc.IMessageSink,System.Collections.Generic.IEnumerable{System.String})"/>.
            </param>
            <param name="inputFiles">A list of input files to open if 
            autoOpenInputFiles is true. If this is null, The input files are 
            assumed to be those command-line arguments left over after the options 
            are removed.</param>
            <returns>The map of options (key-value pairs and, for options that 
            don't have a value, key-null pairs).</returns>
            <remarks>
            Note: If you get your command-line arguments as a single 
            string, use <see cref="M:Loyc.G.SplitCommandLineArguments(System.String)"/> first 
            to split it into an array.
            <para/>
            This method doesn't check for --help. To implement --help, call 
            <see cref="M:LeMP.Compiler.MaybeShowHelp(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Loyc.Pair{System.String,System.String}}},System.IO.TextWriter)"/> on the return value.
            </remarks>
        </member>
        <member name="M:LeMP.Compiler.ProcessArguments(Loyc.Collections.BMultiMap{System.String,System.String},System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>Processes all standard command-line arguments from 
            <see cref="F:LeMP.Compiler.KnownOptions"/>, except --help.</summary>
            <param name="options">A set of options, presumably derived from command-
            line options using <see cref="M:Loyc.Utilities.UG.ProcessCommandLineArguments(System.Collections.Generic.IList{System.String},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Collections.Generic.IDictionary{System.Char,System.String},Loyc.Collections.InvertibleSet{System.String},System.Int32,System.Boolean,System.Boolean)"/></param>
            <param name="warnAboutUnknownOptions">Whether to warn (to <see cref="P:LeMP.Compiler.Sink"/>) 
            about options not listed in <see cref="F:LeMP.Compiler.KnownOptions"/>.</param>
            <param name="inputFiles">Files to open with <see cref="M:LeMP.Compiler.OpenSourceFiles(Loyc.IMessageSink,System.Collections.Generic.IEnumerable{System.String})"/></param>
            <returns>true, unless inputFiles != null and all input files failed to open.</returns>
            <remarks>
            This method calls AddStdMacros() unless options includes "nostdmacros".
            </remarks>
        </member>
        <member name="M:LeMP.Compiler.AddStdMacros">
            <summary>Adds standard macros from LeMP.StdMacros.dll, and adds the 
            namespaces LeMP and LeMP.Prelude to the pre-opened namespace list.</summary>
            <remarks>Note: prelude macros were already added by the constructor.</remarks>
        </member>
        <member name="M:LeMP.Compiler.CompleteInputOutputOptions">
            <summary>Fills in all fields of <see cref="F:LeMP.Compiler.Files"/> that are still null,
            based on the command-line options. Calling this is optional, since Run()
            calls it anyway.</summary>
        </member>
        <member name="M:LeMP.Compiler.OpenSourceFiles(Loyc.IMessageSink,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Opens a set of source files by file name, and creates a text file for each.</summary>
            <param name="sink"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="M:LeMP.Compiler.Run">
            <summary>Runs the <see cref="F:LeMP.Compiler.MacroProcessor"/> on all input <see cref="F:LeMP.Compiler.Files"/>.</summary>
        </member>
        <member name="T:LeMP.InputOutput">
            <summary>
            For LeMP: an input file plus per-file options (input and output language) and output code.
            </summary>
        </member>
        <member name="T:LeMP.MacroProcessor">
            <summary>
            Encapsulates the LeMP engine, a simple LISP-style macro processor, 
            suitable for running LLLPG and other lexical macros.
            </summary>
            <remarks>
            MacroProcessor itself only cares about a few nodes including 
            #importMacros and #unimportMacros, and { braces } (for scoping the 
            #import statements). The macro processor should be configured with any 
            needed macros like this:
            <code>
              var prelude = typeof(LeMP.Prelude.BuiltinMacros); // the default prelude
              var MP = new MacroProcessor(prelude, sink);
              MP.AddMacros(typeof(LeMP.StandardMacros).Assembly);
              MP.PreOpenedNamespaces.Add((Symbol) "LeMP.Prelude"); // already done for you
              MP.PreOpenedNamespaces.Add((Symbol) "LeMP");
            </code>
            In order for the input code to have access to macros, two steps are 
            necessary: you have to add the macro classes with <see cref="M:LeMP.MacroProcessor.AddMacros(System.Type)"/>
            and then you have to import the namespace that contains the class(es).
            Higher-level code (e.g. <see cref="T:LeMP.Compiler"/>) can define "always-open"
            namespaces by adding entries to PreOpenedNamespaces, and the code being 
            processed can open additional namespaces with a #importMacros(Namespace) 
            statement.
            <para/>
            MacroProcessor is not aware of any distinction between "statements"
            and "expressions"; it will run macros no matter where they are located,
            whether as standalone statements, attributes, or arguments to functions.
            <para/>
            MacroProcessor's main responsibilities are to keep track of a table of 
            registered macros (call <see cref="M:LeMP.MacroProcessor.AddMacros(System.Type)"/> to register more), to
            keep track of which namespaces are open, to scan the input for macros to 
            call; and to control the printout of messages.
            <para/>
            This class processes a batch of files at once. Call either
            <see cref="M:LeMP.MacroProcessor.ProcessSynchronously(Loyc.Syntax.LNodeList)"/> or <see cref="M:LeMP.MacroProcessor.ProcessParallel(System.Collections.Generic.IReadOnlyList{LeMP.InputOutput},System.Action{LeMP.InputOutput})"/>.
            Parallelizing on a file-by-file basis is easy; each source file is completely 
            independent, since no semantic analysis is being done. 
            </remarks>
        </member>
        <member name="P:LeMP.MacroProcessor.Current">
            <summary>Returns the <c>MacroProcessor</c> running on the current thread, or null if none.</summary>
        </member>
        <member name="M:LeMP.MacroProcessor.#ctor(Loyc.IMessageSink)">
            <summary>Initializes MacroProcessor with default prelude.</summary>
        </member>
        <member name="M:LeMP.MacroProcessor.#ctor(Loyc.IMessageSink,System.Type)">
            <summary>Initializes MacroProcessor.</summary>
            <param name="sink">The destination for warning and error messages. NOTE: 
            this class can process files in parallel. Consider using a thread-safe
            implementation of <see cref="T:Loyc.IMessageSink"/>.</param>
            <param name="prelude">An initial type from which to add macros.
            Omit this parameter to use typeof(LeMP.Prelude.BuiltinMacros).</param>
        </member>
        <member name="P:LeMP.MacroProcessor.PreOpenedNamespaces">
            <summary>Macros in these namespaces will be available without an explicit 
            import command (#importMacros). By default this list has one item: 
            @@LeMP.Prelude (i.e. (Symbol)"LeMP.Prelude")</summary>
        </member>
        <member name="F:LeMP.MacroProcessor.DefaultScopedProperties">
            <summary>Default values of scoped properties.</summary>
            <remarks>Code being processed can look up a scoped property named "N" with 
            <c>#getScopedProperty("N")</c> in LESv2 or EC#. This map is empty by default.
            Scoped properties are "scoped" in the sense that setting a property with 
            <c>#setScopedProperty(keyLiteral, valueLiteral)</c> takes effect only until 
            the end of the braced block in which it appears.
            <para/>
            The @@#inputFolder and @@#inputFileName properties (note: @@ is EC# 
            syntax for <see cref="T:Loyc.Symbol"/>) are not normally stored in this collection; 
            when you use <see cref="M:LeMP.MacroProcessor.ProcessSynchronously(Loyc.Syntax.LNodeList)"/> or <see cref="M:LeMP.MacroProcessor.ProcessParallel(System.Collections.Generic.IReadOnlyList{LeMP.InputOutput},System.Action{LeMP.InputOutput})"/>, 
            @@#inputFolder and @@#inputFileName are set according to the folder and 
            filename in <see cref="F:LeMP.InputOutput.FileName"/>. However, @@#inputFolder 
            is not set if the filename has no folder component, so this collection 
            could be used to provide a value of @@#inputFolder in that case.
            </remarks>
        </member>
        <member name="M:LeMP.MacroProcessor.ProcessSynchronously(Loyc.Syntax.LNodeList)">
            <summary>Processes a list of nodes directly on the current thread.</summary>
            <remarks>Note: <c>AbortTimeout</c> doesn't work when using this overload.</remarks>
        </member>
        <member name="M:LeMP.MacroProcessor.ProcessSynchronously(System.Collections.Generic.IReadOnlyList{LeMP.InputOutput},System.Action{LeMP.InputOutput})">
            <summary>Processes source files one at a time (may be easier for debugging).</summary>
        </member>
        <member name="M:LeMP.MacroProcessor.ProcessParallel(System.Collections.Generic.IReadOnlyList{LeMP.InputOutput},System.Action{LeMP.InputOutput})">
            <summary>Processes source files in parallel. All files are fully 
            processed before the method returns.</summary>
        </member>
        <member name="M:LeMP.MacroProcessor.ProcessAsync(System.Collections.Generic.IReadOnlyList{LeMP.InputOutput},System.Action{LeMP.InputOutput})">
            <summary>Processes source files in parallel using .NET Tasks. The method returns immediately.</summary>
        </member>
        <member name="P:LeMP.MacroProcessor.NextTempCounter">
            <summary>Gets the next number to use as a suffix for temporary variables (without incrementing).</summary>
        </member>
        <member name="M:LeMP.MacroProcessor.IncrementTempCounter">
            <summary>Gets the next number to use as a suffix for temporary variables, then increments it.</summary>
            <remarks>MacroProcessor currently starts this counter at 10 to avoid 
            collisions with names like tmp_2 and tmp_3 that might be names chosen 
            by a developer; tmp_10 is much less likely to collide.</remarks>
        </member>
        <member name="T:LeMP.InternalMacroInfo">
            <summary>A macro delegate with a list of namespaces and <see cref="T:LeMP.LexicalMacroAttribute"/>.
            The difference between this and the public class <see cref="T:LeMP.MacroInfo"/>
            is that here the goal is to associate a list of namespaces with a a single 
            macro name (in case the macro is re-used in other namespaces) and the other 
            MacroInfo associates a single namespace with macro attributes that 
            potentially list multiple names.</summary>
        </member>
        <member name="T:LeMP.MacroProcessorTask">
            <summary>Holds the transient state of the macro processor. Since one
            <see cref="T:LeMP.MacroProcessor"/> object can process multiple files in 
            parallel, we need an inner class to hold the state of each individual 
            transformation task.</summary>
            <remarks>
            The following simplified pseudocode summarizes the essential elements
            of how MacroProcessorTask works in typical cases.
            <pre>
             ProcessRoot(stmts) { 
                PreProcess(ref stmts, ...);
             }
             PreProcess(ref list, ...) {
                Save _s, _ancestorStack, etc. and restore on exit
                Initialize _s, _ancestorStack, root scope
                list = ApplyMacrosToList(list, ...);
             }
             ApplyMacrosToList(list, ...) {
               Call ApplyMacros(...) to apply macros to each item in the list.
               If no macros produce a new result, return the original list.
               otherwise, initialize the result list and node queue.
               For each remaining node in the node queue, 
                 call ApplyMacros(...) on that node and add result to results.
               Return results.
             }
             ApplyMacros(LNode input, ...) {
               for (;;) {
                 the usual sequence of events is 
                 1. Call GetApplicableMacros(...) to find any relevant macros
                 2. If any macros apply, call ApplyMacrosFound(...)
                 3. If no macros produced output, call ApplyMacrosToChildrenOf(...) and return.
                    otherwise, restart the loop using the output as the next iteration's input
               }
             }
             ApplyMacrosFound(CurNodeState s) {
               Separate the applicable macros (s.FoundMacros) into groups by priority.
               For each priority level starting at the highest priority,
                 Call ApplyMacrosFound2(s, foundMacros)
             }
             ApplyMacrosFound2(CurNodeState s, foundMacros) {
               For each macro in foundMacros,
                 Preprocess child nodes if the macro uses MacroMode.ProcessChildrenBefore
                 Invoke the macro and save its result for later, including any messages
               Print messages if applicable
               Return the result of the first macro to have produced a result,
                 or null if no macro produced a result.
             }
             ApplyMacrosToChildrenOf(LNode node, ...) {
               Apply macros to attributes: ApplyMacrosToList(node.Attrs, ...)
               Apply macros to Target, if any: ApplyMacros(node.Target, ...); 
               Apply macros to Args: ApplyMacrosToList(node.Args, ...);
             }
            </pre>
            Not shown: a stack of <see cref="T:LeMP.MacroProcessorTask.Scope"/> objects keep track of information
            local to each pair of braces (Scope also serves as an implementation of 
            <see cref="T:LeMP.IMacroContext"/>). <see cref="T:LeMP.MacroProcessorTask.CurNodeState"/> is an object 
            that holds state specifically regarding the node currently being processed; 
            usually the object called <c>_s</c> is re-used for all the different nodes, 
            but sometimes a macro will ask for its child nodes to be processed, in 
            which case a second <see cref="T:LeMP.MacroProcessorTask.CurNodeState"/> must be introduced to
            avoid destroying the original state. Some of the fields of <see cref=
            "T:LeMP.MacroProcessorTask.CurNodeState"/> would have just been local variables, if not for the 
            fact that <see cref="T:LeMP.IMacroContext"/> allows a currently-running macro to 
            view or even modify some of this information.
            </remarks>
        </member>
        <member name="M:LeMP.MacroProcessorTask.ProcessRoot(Loyc.Syntax.LNodeList)">
            <summary>Top-level macro applicator.</summary>
        </member>
        <member name="M:LeMP.MacroProcessorTask.ApplyMacros(Loyc.Syntax.LNode,System.Int32,System.Boolean,System.Boolean,Loyc.Collections.DList{Loyc.Pair{Loyc.Syntax.LNode,System.Int32}}@)">
            <summary>Recursively applies macros in scope to <c>input</c>.</summary>
            <param name="maxExpansions">Maximum number of opportunities given 
            to macros to transform a given subtree. The output of any macro is
            transformed again (as if by calling this method) with 
            <c>maxExpansions = maxExpansions - 1</c> to encourage the 
            expansion process to terminate eventually.</param>
            <param name="nodeQueue">The act of processing child nodes (by calling 
            ApplyMacrosToChildrenOf) invalidates most members of _s including 
            _s.NodeQueue. But when ApplyMacrosToList calls this method it needs
            the node queue, so this method saves _s.NodeQueue in nodeQueue before
            doing something that will destroy _s.NodeQueue. It also sets 
            _s.NodeQueue = nodeQueue when it starts.</param>
            <returns>Returns a transformed tree (or null if the macros did not 
            change the syntax tree at any level).</returns>
            <remarks>EnqueueSplice is used if a #splice(...) is encountered.</remarks>
        </member>
        <member name="T:LeMP.Tests.SmallerMacroTests">
            <summary>Combined test suite for all the "smaller" macros that don't need 
            a lot of testing.</summary>
        </member>
        <member name="T:LeMP.TestCompiler">
            <summary>A simple version of Compiler that takes a single input and produces 
            a StringBuilder. Pre-opens LeMP.Prelude namespaces.</summary>
        </member>
        <member name="M:LeMP.TestCompiler.StripExtraWhitespace(System.String,System.String[])">
            <summary>Strips whitespace and single-line comments from a string.
            Helps test whether two blocks of code are "sufficiently equal".</summary>
        </member>
        <member name="T:LeMP.Prelude.BuiltinMacros">
            <summary>Defines <c>noMacro(...)</c> for suppressing macro expansion and 
            <c>import macros your.namespace.name</c> as an alias for 
            <c>#importMacros(your.namespace.name)</c>.
            </summary>
        </member>
    </members>
</doc>
