#ecs;
#importMacros(Loyc.LLPG);
using System(, .Text, .Linq, .Collections.Generic, .Diagnostics);
using Loyc;               // optional (for IMessageSink, Symbol, etc.)
using Loyc.Collections;   // optional (many handy interfaces & classes)
using Loyc.Syntax.Lexing; // For BaseLexer

namespace Loyc.Syntax.Les; // braces around the rest of the file are optional

using TT = TokenType; // Abbreviate TokenType as TT
using P = LesPrecedence;
using S = CodeSymbols;

public partial class Les3Lexer
{
	// Code snippet related to error recovery in case of mismatched brackets
	define PopBrackStack($expected, $autoCloseExpr) {
		replace (#TOS => _brackStack[_brackStack.Count-1, default(TT)]) {
			while ($autoCloseExpr)
				_brackStack.Pop();
			if (_brackStack.Count > 1 && static_if($expected `code==` _, true, _brackStack.Last == $expected))
				_brackStack.Pop();
		}
	}

	[FullLLk, PrematchByDefault]
	LLLPG (lexer) @{
	// `@{` invokes LLLPG in ANTLR-style syntax mode, but there are several 
	// differences; see http://ecsharp.net/lllpg/lllpg-in-antlr-style.html

	// Whitespace & comments -------------------------------------------------

	extern token Spaces : (' '|'\t')+;
	token DotIndent : ( '.' ('\t'|' '+) )*;

	token Newline[bool ignoreIndent = false] returns [object result] :
		( '\r' '\n'? | '\n' )
		{AfterNewline(ignoreIndent, skipIndent: false);}
		// Tokens with WhitespaceTag are filtered out by WhitepaceFilter.
		// We want to filter out newlines inside parentheses and square brackets.
		{return _brackStack.Last == TokenType.LBrace ? null : WhitespaceTag.Value;};
	token SLComment returns [object result] :
		"//" nongreedy(_)* (@"\\" | ('\r'|'\n'|EOF) =>)
		{return WhitespaceTag.Value;};
	[LL(3)] token MLComment returns [object result] :
		"/*" nongreedy(MLComment / Newline(true) / _)* "*/"
		{return WhitespaceTag.Value;};
		
	// Numbers ---------------------------------------------------------------
	
	token Number returns [object result] :
		('\u2212')? // 'âˆ’'
		(HexNumber / BinNumber / DecNumber)
		{UString numberText = Text();}
		(	{_startPosition = InputPosition;} // as expected by IdCore
			{object boolOrNull = NoValue.Value;}
			suffix:IdCore[ref boolOrNull]
			{PrintErrorIfTypeMarkerIsKeywordLiteral(boolOrNull);}
		)?
		{return ParseLiteral2(suffix, numberText, true);};

	DecDigits : '0'..'9'+ greedy(('_'|'\'') '0'..'9'+)* ;
	[inline] HexDigit  : '0'..'9' | 'a'..'f' | 'A'..'F' ;
	HexDigits : greedy(HexDigit)+ greedy(('_'|'\'') greedy(HexDigit)+)* ;
	
	DecNumber :
		(DecDigits | '.' DecDigits =>)
		( '.' DecDigits )?
		greedy( ('e'|'E') ('+'|'-')? DecDigits )?
		;
	HexNumber :
		'0' ('x'|'X')
		(HexDigits | '.' HexDigits =>)
		(	'.' ('p'|'P'|HexDigit) =>
			'.' greedy( HexDigits )? 
			greedy( ('p'|'P') ('+'|'-')? DecDigits )?
		)?
		;
	BinNumber :
		'0' ('b'|'B')
		(DecDigits | '.' DecDigits =>)
		( '.' DecDigits )?
		greedy( ('p'|'P') ('+'|'-')? DecDigits )?
		;
	
	// Strings ---------------------------------------------------------------
		
	token SQString returns [object result] :
		{bool parseNeeded = false;}
		'\'' ('\\' _ {parseNeeded = true;} | ~('\''|'\\'|'\r'|'\n')) '\'' 
		{return ParseSQStringValue(parseNeeded);};
	
	token DQString returns [object result] :
		{bool parseNeeded = false;}
		(	'"' [ '\\' _ {parseNeeded = true;} | ~('"'|'\\'|'\r'|'\n') ]* 
			('"' / {parseNeeded = true;}) )
		{return ParseStringValue(parseNeeded, isTripleQuoted: false);};
	
	[LL(4)] token TQString returns [object result] :
		{bool parseNeeded = true;}
		{_style = NodeStyle.TDQStringLiteral;}
		(	'"' '"' '"' nongreedy(Newline(true) / _)* '"' '"' '"' 
		| {_style = NodeStyle.TQStringLiteral;}
			"'''"       nongreedy(Newline(true) / _)* "'''" )
		{return ParseStringValue(parseNeeded, isTripleQuoted: true);};

	BQString [out bool parseNeeded]:
		{parseNeeded = false;}
		'`' ('\\' _ {parseNeeded = true;} | ~('`'|'\\'|'\r'|'\n'))*
		('`' | error {parseNeeded = true; Error(0, "Expected closing backquote");});

	// Nontrivial punctuation & operators -----------------------------------
	
	[inline] extern OpCharExceptDot :
		'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':';
	[inline] extern OpChar : 
		'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.';
	LettersOrPunc : 'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'#'|
		'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.'|'$';
	
	// Treat dot specially so that 2*.5 means 2 * 0.5, but 2..5 means 2 .. 5
	token Operator returns [object result] : 
		( '$'? ( OpCharExceptDot | '.' ((~'0'..'9' | EOF) =>) greedy('.')* )+ / '$' )
		{$result = ParseOp(out _type);};
	
	token SQOperator returns [object result] : 
		"'"
		(LettersOrPunc+ { _type = TT.SingleQuoteOp; })?
		// Note: SQString has higher priority in the grammar; this rule is not called if it's a proper character
		("'" { _type = TT.Literal; return ParseSQStringValue(true); })?
		{return (Symbol)Text();};

	// Identifiers, keywords and named literals --------------------------------

	token Keyword returns [object result] :
		'.'
		// Check that the character before '.' is not an identifier character;
		// LLLPG makes faster code in NextToken if we delay the check until after '.'
		&{[Hoist] InputPosition < 2-$LI || !Try_ScanIdContChar($LI-2)}
		NormalId
		{return (Symbol)("#" + CharSource.Slice(int sp = _startPosition + 1, InputPosition - sp));};

	[LL(3)]
	token Id returns [object result] :
		{object boolOrNull = NoValue.Value;}
		idtext:IdCore[ref boolOrNull]
		(	{saveAndRestore(_startPosition); _startPosition = InputPosition;}
			(value:TQString / value:DQString)
			{
				_type = TT.Literal;
				PrintErrorIfTypeMarkerIsKeywordLiteral(boolOrNull);
				return ParseLiteral2(idtext, value.ToString(), false);
			}
		)?
		{return boolOrNull != NoValue.Value ? boolOrNull : (Symbol) idtext;};

	[inline] extern token IdStartChar : '_'|'a'..'z'|'A'..'Z'|'#';
	[recognizer { bool ScanIdContChar(); }]
	token IdContChar : IdStartChar | '0'..'9' | '\'' &!("''");

	NormalId : IdStartChar greedy(IdContChar)*;

	token IdCore[ref object boolOrNull] returns [UString result] :
		( BQString[out bool parseNeeded] {$result = ParseStringValue(parseNeeded, false);}
		| NormalId {
			$result = Text();
			if ($result == "true")  { _type = TT.Literal; boolOrNull = G.BoxedTrue; }
			if ($result == "false") { _type = TT.Literal; boolOrNull = G.BoxedFalse; }
			if ($result == "null")  { _type = TT.Literal; boolOrNull = null; }
		  }
		);


	token SpecialLiteral returns [object result] :
		"@@" LettersOrPunc+ {return ParseAtAtLiteral(Text());};

	// Shebang (optional feature) --------------------------------------------

	token Shebang returns [object result] : 
		&{InputPosition == 0} "#!" ~('\r'|'\n')* Newline? 
		{return WhitespaceTag.Value;};

	// Token -----------------------------------------------------------------

	[LL(4)] public override token NextToken returns [Maybe<Token> result] :
		( Spaces / &{InputPosition == _lineStartAt} '.' (' '|'\t') => DotIndent )?
		{
			_startPosition = InputPosition;
			_style = 0;
			if (LA0 == -1) { // EOF
				return NoValue.Value;
			}
		}
		( {_type = TT.Shebang;}    value:Shebang
		/ {_type = TT.Literal;}    value:SpecialLiteral
		/ {_type = TT.BQId;}       ('`' => value:Id)
		/ {_type = TT.Id;}         value:Id
		/ {_type = TT.Newline;}    value:Newline
		/ {_type = TT.SLComment;}  value:SLComment
		/ {_type = TT.MLComment;}  value:MLComment
		/ {_type = TT.Literal;}    value:Number
		/ {_type = TT.Literal;}    value:TQString
		/ {_type = TT.Literal;}    value:DQString
		/ {_type = TT.Literal;}    value:SQString
		/ {_type = TT.SingleQuote;} value:SQOperator
		/ {_type = TT.Comma;}      ',' { value = @@`',`; }
		/ {_type = TT.Semicolon;}  ';' { value = @@`';`; }
		/ {_type = TT.LParen;}     '(' {_brackStack.Add(_type);}
		/ {_type = TT.RParen;}     ')' {PopBrackStack(TT.LParen, #TOS == TT.LBrack);}
		/ {_type = TT.LBrack;}     '[' {_brackStack.Add(_type);}
		/ {_type = TT.RBrack;}     ']' {PopBrackStack(TT.LBrack, #TOS == TT.LParen);}
		/ {_type = TT.LBrace;}     '{' {_brackStack.Add(_type);}
		/ {_type = TT.RBrace;}     '}' {PopBrackStack(_, #TOS != TT.LBrace);}
		/ {_type = TT.At;}         '@' { value = @@`'@`; }
		/ {_type = TT.Keyword;}    value:Keyword
		/                          value:Operator
		/ error _ {_type = TT.Unknown;}
		)
		{	Debug.Assert(InputPosition > _startPosition);
			return new Token((int) _type, _startPosition, InputPosition - _startPosition, _style, value);
		};

	// Partial tokens used for syntax highlighting. An LES syntax highlighter
	// can record the token continued in each line (''', """ or /*) call one
	// of these rules to proces that token until it ends or the line ends.
		
	[LL(3)]
	public token TDQStringLine returns [bool result] :
		nongreedy(_)* (Newline(true) {return false;} | '"' '"' '"' {return true;});
	[LL(3)]
	public token TSQStringLine returns [bool result] :
		nongreedy(_)* (Newline(true) {return false;} | "'''" {return true;});
	public token MLCommentLine[ref int nested] returns [bool result] :
		(greedy
			( &{nested>0} "*/" {nested--;}
			/ "/*" {nested++;}
			/ ~('\r'|'\n'|'*')
			/ '*' (&!'/')
			))*
		(Newline(true) {return false;} | "*/" {return true;});

	}; // end LLLPG lexer
};
