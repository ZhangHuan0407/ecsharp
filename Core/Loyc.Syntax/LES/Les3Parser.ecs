#ecs;
#importMacros(Loyc.LLPG);
using System(, .Text, .Linq, .Collections.Generic, .Diagnostics);
using Loyc;               // for IMessageSink, Symbol, etc.
using Loyc.Collections;   // many handy interfaces & classes
using Loyc.Collections.Impl;
using Loyc.Syntax.Lexing; // For BaseLexer
using Loyc.Syntax;        // For BaseParser<Token> and LNode

namespace Loyc.Syntax.Les; // braces around the rest of the file are optional

using TT = TokenType; // Abbreviate TokenType as TT
using P = LesPrecedence;
using S = CodeSymbols;

partial class Les3Parser
{
	#rawText("#pragma warning disable 162, 642");

	protected new const TT EOF = TT.EOF;

	// Note: verbose messages are only printed when custom tool is given --verbose flag
	[FullLLk, LL(2), Verbosity(1), PrematchByDefault]
	LLLPG (parser(laType: TT, matchType: int, terminalType: Token, allowSwitch: true)) @{

	alias("@" = TT.At);
	alias("." = TT.Dot);
	alias(":" = TT.Colon);
	alias(";" = TT.Semicolon);
	alias("," = TT.Comma);
	alias("!" = TT.Not);
	alias("(" = TT.LParen);
	alias(")" = TT.RParen);
	alias("[" = TT.LBrack);
	alias("]" = TT.RBrack);
	alias("{" = TT.LBrace);
	alias("}" = TT.RBrace);
	alias("'" = TT.SingleQuote);
	alias("\n" = TT.Newline);

	members {
		void MissingEndMarker(LNode previousExpr, TokenType endMarker)
		{
			var location = new SourceRange(SourceFile, LT(-1).EndIndex + 1);
			ErrorSink.Write(Severity.Error, location, "Expected '{0}'", endMarker == TT.Comma ? ',' : ';');
		}
		public LNodeList ExprList(LNode firstItem = null)
		{
			var endMarker = default(TT);
			return ExprList(ref endMarker, firstItem, isBracedBlock: false);
		}
		public bool IsSpaceBefore(int li)
		{
			return LT(li).StartIndex > LT(li-1).EndIndex;
		}
		public void CheckForSpace(bool expectSpace, string errorMsg)
		{
			if ((LT0.StartIndex == LT(-1).EndIndex) == expectSpace) {
				var location = new SourceRange(SourceFile, LT0.StartIndex);
				ErrorSink.Write(Severity.Error, location, errorMsg);
			}
		}
		public bool IsContinuator(object ltv) => ltv != null && Continuators.ContainsKey(ltv);
	}

	// Note: we're not saving newlines/trivia here - we rely on `StandardTriviaInjector` for that
	NewlinesOpt : greedy("\n")*;

	// In a list of CompactExpression, newlines, semicolons and commas behave as shown.
	// In square brackets / parens, newlines are filtered out so they're invisible here.
	// [. a b, c d] => [a, b, c, d]
	// [. a b; c d] => [a, b, `';`, c, d]
	protected CompactExpression returns [LNode result] :
		(	result:TopExpr[compactMode: true]             greedy(",")?
		|	","  { result = F.Id(GSymbol.Empty, $","); }
		|	";"  { result = F.Id(S.Semicolon, $";"); }
		|	"\n" { result = F.Id(S.Semicolon, $"\n"); }
		);

	[LL(1)]
	protected NextExpression[ref TokenType separatorType, out Token separator, bool isBracedBlock] returns [LNode result] :
		{ separator = default(Token); }
		
		(	result:TopExpr[compactMode: false]
		/	{ result = F.Id(S.Missing, LT0); }
		)
		ErrorTokensOpt
		greedy( &{isBracedBlock} (")"|"]") {Error(-1, "Ignoring unexpected closing bracket");} )?
		greedy(separator=(";"|","|"\n"))?
		{
			var curSepType = separator.Type();
			if (curSepType == TT.Newline && !isBracedBlock) {
				Error(-1, "Expected ',' or ';' here");
			} else if (curSepType != 0) {
				if (curSepType == TT.Newline)
					curSepType = TT.Semicolon;
				if (curSepType != separatorType) {
					if (separatorType == default(TT)) {
						separatorType = curSepType;
					} else if (!(separatorType == TT.Semicolon && curSepType == TT.EOF)) {
						Error(-1, "Unexpected separator: {0} should be {1}",
							ToString((int) curSepType), ToString((int) separatorType));
					}
				}
			}
		}
		NewlinesOpt;

	// A sequence of expressions separated by commas OR semicolons.
	// The `ref endMarker` parameter tells the caller if semicolons were used.
	[LL(1)]
	public ExprList[ref TokenType separatorType, LNode firstItem = null, bool isBracedBlock = false] returns [LNodeList result] :
		{ var list = InternalList<LNode>.Empty; }
		{ if (firstItem != null) list.Add(firstItem); }
		NewlinesOpt
		(	&!{isBracedBlock}
			&{LT($LI).EndIndex < LT($LI+1).StartIndex}
			"."
			greedy(list+=CompactExpression)*
			{ separatorType = TT.Comma; } // if the context is plain parens, recognize this as a tuple
		|	"'"
			TokenListEx
			{ list.AddRange($TokenListEx); }
			{ separatorType = TT.Comma; } // if the context is plain parens, recognize this as a tuple
		|	{ var separator = default(Token); }
			(	(";"|","|TopExpr) =>
				list+=NextExpression[ref separatorType, out separator, isBracedBlock]
			)*
			{
				if (separator.Type() == TT.Comma)
					list.Add(F.Id(S.Missing, separator));
			}
		)
		{ return LNode.List(list); };

	ErrorTokensOpt :
		<=> // Make TokenList invisible to prediction analysis, so LLLPG treats this as an empty rule
		{int _errorPosition = InputPosition;}
		TokenList {
			if (!$TokenList.IsEmpty)
				Error(_errorPosition - InputPosition, "Expected end of expression (',', ';', etc.)");
		};

	// Lazy version of ExprList is used for parsing the top-level code in a streaming way
	[LL(1)]
	public ExprListLazy[Holder<TokenType> separatorType, bool isBracedBlock = true] returns [IEnumerable<LNode> result] :
		NewlinesOpt
		(	&!{isBracedBlock}
			&{LT($LI).EndIndex < LT($LI+1).StartIndex}
			"."
			greedy(CompactExpression { 
				yield return $CompactExpression;
				break; // workaround for LLLPG not understanding difference between `return` and `yield return`
			})*
		|	"'"
			TokenListEx
			{
				foreach (var item in $TokenListEx)
					yield return item;
			}
		|	{ var separator = default(Token); }
			(	(";"|","|TopExpr) =>
				NextExpression[ref separatorType.Value, out separator, isBracedBlock]
				{
					yield return $NextExpression;
					break; // workaround for LLLPG not understanding difference between `return` and `yield return`
				}
			)*
			{
				if (separator.Type() == TT.Comma)
					yield return F.Id(S.Missing, separator);
			}
		);

	[LL(1)] // Simplify the output
	protected TopExpr[bool compactMode] returns [LNode result] :
		{int startIndex = LT0.StartIndex;}
		{var attrs = new LNodeList();}
		(	// @Attribute
			"@" {CheckForSpace(false, "Unexpected space after `@`");}
			(	"@"
			|	attr:=Expr[Precedence.MinValue, compactMode: true]
				{attrs.Add(attr);}
			)
			greedy(~("{"|"\n") => {CheckForSpace(true, "Expected space after attribute");})?
			NewlinesOpt
		)*
		(	e:Expr[Precedence.MinValue, compactMode]
			//greedy(
			//	":" (("\n"|")"|"]"|"}"|EOF) =>)
			//	{e = F.Call(@@`'suf:`, e, e.Range.StartIndex, $":".EndIndex, $":".StartIndex, $":".EndIndex);}
			//)?
		/	error {Error(0, "Expected an expression here");} 
			nongreedy(_)+ 
			(TopExpr[compactMode] | ("\n"|";"|","|")"|"]"|"}"|EOF) => {e = MissingExpr(LT0);})
		)
		{if (!attrs.IsEmpty) { e = e.PlusAttrsBefore(attrs).WithRange(startIndex, e.Range.EndIndex); }}
		{$result = e;};

	////////////////////////////////////////////////////////////////////////////
	// Normal Expressions
	////////////////////////////////////////////////////////////////////////////
	// - particles: ids, literals, (parenthesized), {braced}
	// - ++prefix_operators
	// - infix + operators
	// - suffix_operators++
	// - juxtaposition operator
	// - Special primary expressions:
	//   method_call(with arguments), block{call;}, indexer[with, indexes], generic!arguments,

	[LL(1)] // simplifies output a lot
	Expr[Precedence context, bool compactMode] returns [LNode result] :
		(	&!{["A compact list cannot directly contain a keyword expression. Surround it with parentheses."] compactMode}
			// Dot-keyword expression
			e:KeywordExpression
		|	{Precedence prec;}
			e:PrefixExpr[context, compactMode]
			// Note: it's better to repeat &{[Local] !compactMode || LT($LI-1).EndIndex == LT($LI).StartIndex}
			//       over and over rather than suffer the lousy code generation that happens if the loop is a
			//       separate choice from the alts.
			greedy(
				// Method_calls(with arguments), block_calls {...}, indexers[with indexes], generic!arguments
				&{[Local] !compactMode || LT($LI-1).EndIndex == LT($LI).StartIndex}
				&{[Local] context.CanParse(P.Primary)}
				e=FinishPrimaryExpr(e)
			|	// Infix operator
				&{[Local] !compactMode || LT($LI-1).EndIndex == LT($LI).StartIndex}
				&{[Local] CanParse(context, $LI, out prec)}
				opName:=InfixOperatorName[out Token op, compactMode]
				rhs:=Expr(prec, compactMode)
				{e = F.Call(opName, e, rhs, e.Range.StartIndex, rhs.Range.EndIndex, op.StartIndex, op.EndIndex, NodeStyle.Operator);}
			|	// Suffix operator
				&{[Local] !compactMode || LT($LI-1).EndIndex == LT($LI).StartIndex}
				&{[Local] context.CanParse(_prec.Find(OperatorShape.Suffix, LT($LI).Value))}
				t:TT.PreOrSufOp
				{e = F.Call(_prec.ToSuffixOpName((Symbol) t.Value), e, e.Range.StartIndex, t.EndIndex, t.StartIndex, t.EndIndex, NodeStyle.Operator);}
			|	// ! operator (generic 'of)
				&{[Local] !compactMode || LT($LI-1).EndIndex == LT($LI).StartIndex}
				&{[Local] context.CanParse(P.Of)}
				"!"
				{ LNodeList args; }
				{ int endIndex; }
				(	"(" args=ExprList[e] c:=")"  { endIndex = c.EndIndex; }
				/	T:=Expr[P.Of, compactMode]   { args = LNode.List(e, T); endIndex = T.Range.EndIndex; }
				)
				{e = F.Call(S.Of, args, e.Range.StartIndex, endIndex, $"!".StartIndex, $"!".EndIndex, NodeStyle.Operator);}
			)*
		)	{return e;};

	// This example produces horribly complicated code
	//ExprBad[Precedence context] returns [LNode result] :
	//	TT.Id
	//	greedy(
	//		&{[Local] A}
	//		(	// Method_calls(with arguments), block_calls {...}, indexers[with indexes], generic!arguments
	//			&{[Local] B}
	//			"(" ")"
	//		|	// Infix operator
	//			&{[Local] C}
	//			("." | &{X} ":" | &{Y} TT.Id)
	//			ExprBad[prec]
	//		|	// ! operator (generic 'of)
	//			&{[Local] E}
	//			"!" "(" ")"
	//		)
	//	)*;

	InfixOperatorName[out Token op, bool compactMode] returns [Symbol result]
		:	op=(TT.NormalOp|TT.Assignment|".") "\n"*      {$result = (Symbol) op.Value;}
		|	&{[Hoist] (TT)LA($LI+1) != TT.Newline} op=":" {$result = (Symbol) op.Value;}
		|	&{[Hoist] !IsContinuator(LT($LI).Value) && !compactMode}
			op=TT.Id
			(	// detect combo operator (optional punctuation part)
				&{op.EndIndex == LT0.StartIndex} op2:(TT.NormalOp|TT.Assignment|".")
				{
					$result = GSymbol.Get("'"+op.Value.ToString() + op2.Value.ToString().Substring(1));
				}
			/	{
					$result = GSymbol.Get("'"+op.Value.ToString());
					if ((TT)LA0 == TT.Newline)
						Error(0, "Syntax error. {0}' is used like an operator but is followed by a newline, which is not allowed unless the expression is placed in parentheses.".Localized($result));
				}
			)
			(	"\n"+
			/	{
					if (LT(-1).EndIndex == LT0.StartIndex)
						Error(0, "Syntax error. {0}' is used like an operator but is not followed by a space.".Localized($result));
				}
			)
		;

	// Helper rule that parses one of the syntactically special primary expressions
	FinishPrimaryExpr[LNode e] returns [LNode result]
		:	// call(function)
			result:CallArgs[e]
		|	// Indexer / square brackets
			lb:="[" args:ExprList[e] rb:="]"
			{return F.Call(S.IndexBracks, args, e.Range.StartIndex, rb.EndIndex, lb.StartIndex, rb.EndIndex, NodeStyle.Operator);}
		;

	CallArgs[LNode target] returns [LNode result] : 
		{var endMarker = default(TokenType);}
		"(" args:ExprList[ref endMarker] ")" 
		{
			$result = MarkCall(F.Call(target, args, target.Range.StartIndex, $")".EndIndex).SetBaseStyle(NodeStyle.PrefixNotation));
			if (endMarker == TT.Semicolon) { $result.Style |= NodeStyle.Alternate; }
		};

	PrefixExpr[Precedence context, bool compactMode] returns [LNode result] 
		:	// Prefix operator
			&{!compactMode || LT(0).EndIndex == LT(1).StartIndex}
			op:(TT.NormalOp|"!"|":"|TT.BQOperator|TT.Assignment|TT.PrefixOp|TT.PreOrSufOp)
			NewlinesOpt
			e:Expr[PrefixPrecedenceOf(op), compactMode]
			{$result = F.Call(op, e, op.StartIndex, e.Range.EndIndex, NodeStyle.Operator);}
		/	result:Particle[compactMode]
		;

	// An Particle is:
	// - an (expression) in parenthesis or a tuple
	// - a literal or simple identifier
	//   - simple calls are also handled here, as a space optimization
	// - a { block } in braces
	// - a [ list  ] in square brackets
	Particle[bool compactMode = false] returns [LNode result]
		:	id:=(TT.Id|TT.BQId) // identifier
			{$result = F.Id(id).SetStyle(id.Style);}
		|	lit:=TT.Literal // literal
			{$result = F.Literal(lit);}
		//|	// ' token list
		//	op:=TT.SingleQuoteOp TokenList
		//	{$result = F.Call((Symbol)op.Value, $TokenList, op.StartIndex, 
		//	                  $TokenList.IsEmpty ? op.EndIndex : $TokenList.Last.Range.EndIndex);}
		|	// {statements; in; braces}
			result:BracedBlock
		|	// [list]
			result:SquareBracketList
		|	// (parens) - possibly a tuple
			{var endMarker = default(TT);}
			"(" {bool saveParens = !compactMode && (TT)LA0 != TT.At;}
			list:=ExprList[ref endMarker]
			")" {
				if (endMarker != default(TT) || list.Count != 1) {
					$result = F.Call(S.Tuple, list, $"(".StartIndex, $")".EndIndex, $"(".StartIndex, $"(".EndIndex);
				} else {
					$result = saveParens ? F.InParens(list[0], $"(".StartIndex, $")".EndIndex) : list[0];
				};
			}
		|	error {
				$result = MissingExpr(LT0, "Expected a particle (id, literal, {braces} or (parens)).");
			};

	SquareBracketList returns [LNode result] : 
		"[" list:=ExprList "]"
		{$result = F.Call(S.Array, list, $"[".StartIndex, $"]".EndIndex, $"[".StartIndex, $"[".EndIndex).SetStyle(NodeStyle.Expression);};

	// Token lists (TODO: add unit tests)
	[LL(1), #new]
	TokenList   returns [LNodeList result] @init {$result = LNode.List();} :
		greedy( result+=TokenListParticle )*;
	[LL(1)]
	TokenListEx returns [LNodeList result] :
		( t:(","|";") { $result.Add(F.Id(t)); } 
		| result+=TokenListParticle
		)*;
	[LL(1)]
	TokenListParticle returns [LNode result]
		:	"(" TokenListEx ")"
			{ return F.Call(@@`'()`, $TokenListEx, $"(".StartIndex, $")".EndIndex); }
		/	SquareBracketList                { return $SquareBracketList; }
		/	BracedBlock                      { return $BracedBlock; }
		/	t:=TT.Literal                    { return F.Literal(t); }
		/	t:=(~(","|";"|"\n"|")"|"]"|"}")) { return F.Id(t); };

	////////////////////////////////////////////////////////////////////////////
	// Keyword Statement and related (continuators, braced blocks, paren blocks)
	////////////////////////////////////////////////////////////////////////////

	KeywordExpression returns [LNode result] @init {var args = new LNodeList();} :
		kw:TT.Keyword           {var keyword = kw.Value as Symbol;}
		(	// simplify the output by telling LLLPG what to expect if not an expr
			("\n" | ";" | EOF | ")" | "]" | "}") => 
		/	args+=Expr[Precedence.MinValue, compactMode: false] )
		greedy( "\n"? args+=BracedBlock )?
		greedy( args+=Continuator )*
		{
			int endIndex = args.IsEmpty ? kw.EndIndex : args.Last.Range.EndIndex;
			$result = MarkSpecial(F.Call(keyword, args, kw.StartIndex, endIndex, kw.StartIndex, kw.EndIndex));
		}
		(=>); // Simplify output by not considering what comes afterward

	Continuator returns [LNode result] :
		"\n"?
		kw:ContinuatorKeyword  {var opName = Continuators[kw.Value];}
		(=>) // simplify output by preventing an unneeded check in KeywordExpression
		greedy("\n")?
		(	bb:BracedBlock     {$result = F.Call(opName, bb, kw.StartIndex, bb.Range.EndIndex, kw.StartIndex, kw.EndIndex);}
		/	e:TopExpr[compactMode: false]
			(	greedy("\n")? bb:BracedBlock 
			    {$result = F.Call(opName, e, bb, kw.StartIndex, bb.Range.EndIndex, kw.StartIndex, kw.EndIndex);}
			/	{$result = F.Call(opName, e, kw.StartIndex, e.Range.EndIndex, kw.StartIndex, kw.EndIndex);})
		);

	BracedBlock returns [LNode result] : 
		"{" => // simplify the output by forcing LL(1) analysis on rules using this rule
		"{" 
			{endMarker := default(TT);}
			stmts:ExprList(ref endMarker, isBracedBlock: true)
		"}" 
		{return F.Call(S.Braces, stmts, $"{".StartIndex, $"}".EndIndex, $"{".StartIndex, $"{".EndIndex).SetStyle(NodeStyle.StatementBlock);};

	ContinuatorKeyword returns [Token result] : &{[Hoist] IsContinuator(LT($LI).Value)} result:TT.Id;

	}; // end LLLPG parser
}
