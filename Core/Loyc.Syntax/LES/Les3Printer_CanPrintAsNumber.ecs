using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Loyc.Syntax.Lexing;

// 0162=Unreachable code detected; 0642=Possibly mistaken empty statement
#rawText("\n#pragma warning disable 162, 642\n");

namespace Loyc.Syntax.Les
{
	partial class Les3Printer
	{
		#importMacros(Loyc.LLPG);
		[NoDefaultArm(true)]
		LLLPG (lexer(inputSource: src, inputClass: LexerSource))
		{
			[ThreadStatic] static LexerSource<UString> src; // provides the APIs expected by LLLPG
			[ThreadStatic] static NullMessageSink msgCounter;

			[LL(3)]
			public static rule bool CanPrintAsNumber(UString textValue, Symbol typeMarker)
			{
				// Check if the typeMarker is potentially acceptable for printing as a number
				if (typeMarker.Name.TryGet(0, '\0') != '_' || !IsNormalIdentifier(typeMarker.Name))
					return false;
				char firstTMChar = typeMarker.Name.TryGet(1, '\0');
				if (firstTMChar == 'e' || firstTMChar == 'E' || firstTMChar == 'p' || firstTMChar == 'P')
					return false;

				// Prepare LexerSource needed by LLLPG, and our error counter
				if (src == null) {
					src = new LexerSource<UString>(textValue, "", 0, false);
					src.ErrorSink = msgCounter = new NullMessageSink();
				} else {
					src.Reset(textValue, "", 0, false); // re-use old object
					msgCounter.ResetCountersToZero();
				}
				
				// Find out whether textValue is in numeric format
				bool isHex = false;
				@{ 
					('\u2212')?  // âˆ’ minus sign
					( BinNumber 
					/ HexNumber { isHex = true; } 
					/ DecNumber 
					) EOF
				};
				return msgCounter.ErrorCount == 0 && 
					!(isHex && (firstTMChar >= 'a' && firstTMChar <= 'f' || firstTMChar >= 'A' && firstTMChar <= 'F'));
			}

			static rule DecDigits @{ '0'..'9'+ greedy(('_'|'\'') '0'..'9'+)* }
			[inline] static rule HexDigit @{ '0'..'9' | 'a'..'f' | 'A'..'F' }
			static rule HexDigits @{ greedy(HexDigit)+ greedy(('_'|'\'') greedy(HexDigit)+)* }

			static rule DecNumber() @{
				(DecDigits | '.' DecDigits => )
				( '.' DecDigits )?
				greedy( ('e'|'E') ('+'|'-')? DecDigits )?
			}
			static rule HexNumber() @{
				'0' ('x'|'X')
				(HexDigits | '.' HexDigits =>)
				(	'.' ('p'|'P'|HexDigit) =>
					'.' greedy( HexDigits )? 
					greedy( ('p'|'P') ('+'|'-')? DecDigits )?
				)?
			}
			static rule BinNumber() @{
				'0' ('b'|'B')
				(DecDigits | '.' DecDigits =>)
				( '.' DecDigits )?
				greedy( ('p'|'P') ('+'|'-')? DecDigits )?
			}
		}
	}
}
