#importMacros(LeMP.les2.to.ecs);
#importMacros(LeMP.ecs);
#useSymbols;
import System;
import System.Collections.Generic;
import System.Linq;
import System.Text;
import System.Diagnostics;
import Loyc;
import Loyc.Syntax;
import Loyc.Syntax.Lexing;

namespace Loyc.Syntax.Les
{
	using TT = TokenType;
	using S = CodeSymbols;
	
	@[public, partial] class Les2Lexer
	{
		@[FullLLk, AddCsLineDirectives(@false)]
		LLLPG lexer;

		// Whitespace & comments -------------------------------------------------

		@[extern] token Spaces() @{ (' '|'\t')* };

		token Newline(ignoreIndent::bool = false) @{
			( '\r' '\n'? | '\n' )
			{AfterNewline(ignoreIndent, true);}
		};
		@[private] token SLComment @{
			"//" (~('\r'|'\n'))* 
			{_value = WhitespaceTag.Value;}
		};
		@[k(3), private] token MLComment @{
			"/*" nongreedy(MLComment / Newline(true) / _)* "*/"
			{_value = WhitespaceTag.Value;}
		};
		
		// Numbers ---------------------------------------------------------------
		
		@[private] token DecDigits() @{ '0'..'9'+ ('_' '0'..'9'+)* };
		@[private] rule HexDigit()  @{ '0'..'9' | 'a'..'f' | 'A'..'F' };
		@[private] token HexDigits() @{ HexDigit+ ('_' HexDigit+)* };
		@[private] rule DecNumber() @{
			( '.' DecDigits
			| DecDigits     ( '.' DecDigits )?
			)
			greedy( ('e'|'E') ('+'|'-')? DecDigits )?
		};
		@[private] rule HexNumber() @{
			'0' ('x'|'X')
			greedy(HexDigits)?
			// Avoid ambiguity with 0x5.Equals(): a dot is not enough
			(	'.' &( '0'..'9' / HexDigits ('p'|'P') ('+'|'-'|'0'..'9') ) 
				HexDigits )?
			greedy( ('p'|'P') ('+'|'-')? DecDigits )?
		};
		@[private] rule BinNumber() @{
			'0' ('b'|'B')
			( '.' DecDigits
			| DecDigits ( '.' DecDigits )?
			)
			greedy( ('p'|'P') ('+'|'-')? DecDigits )?
		};
		@[private] token Number() @{
			'−'? // '−' == '\u2212'
			(HexNumber / BinNumber / DecNumber)
			{ _textValue = Text(); }
			(	{ suffixStart: int = InputPosition; }
				NormalId
				{ _value = IdToSymbol("_" + CharSource.Slice(suffixStart, InputPosition - suffixStart)); }
			/	{ _value = @@_; }
			)
		};
		
		// Strings ---------------------------------------------------------------
		
		@[private] token SQString @{
			{_hasEscapes = false;}
			( '\'' ['\\' _ {_hasEscapes = true;} | ~('\''|'\\'|'\r'|'\n')]* 
			  ('\'' / {_hasEscapes = true;}) )
			{UnescapeSQStringValue();}
		};
		@[private] token DQString @{
			{_hasEscapes = false;}
			(	'"' [ '\\' _ {_hasEscapes = true;} | ~('"'|'\\'|'\r'|'\n') ]* 
				('"' / {_hasEscapes = true;}) )
			{UnescapeString(false);}
		};
		@[k(4), private] token TQString @{
			{_hasEscapes = true;}
			(	{_style = NodeStyle.TDQStringLiteral;}
				'"' '"' '"' nongreedy(Newline(true) / _)* '"' '"' '"' 
			|	{_style |= NodeStyle.TQStringLiteral;}
				"'''"       nongreedy(Newline(true) / _)* "'''" )
			{UnescapeString(true);}
		};
		
		@[private] token BQString @{
			{_hasEscapes = false;}
			'`' ('\\' _ {_hasEscapes = true;} | ~('`'|'\\'|'\r'|'\n'))* '`'
		};
		@[private] token BQOperator @{ BQString {_value = ParseBQStringValue();} };

		// Identifiers and Symbols -----------------------------------------------

		@[private] token IdStartChar @{ '#'|'_'|'a'..'z'|'A'..'Z' };
		// FIXME: 0x80..0xFFFC makes LLLPG make a HashSet<int> of unreasonable size.
		@[private] token IdExtLetter @{ &{char.IsLetter($LA -> char)} 0x80..0xFFFC };
		@[private] token NormalId @{ 
			( IdStartChar|IdExtLetter )
			( IdStartChar|'0'..'9'|IdExtLetter|'\'' &!{@[Hoist] LA($LI) == '\'' && LA($LI+1) == '\'' } )*
		};
		@[private] token FancyId @{ BQString | (LettersOrPunc | IdExtLetter)+ };
		@[private] token Symbol @{
			{_hasEscapes = false;}
			'@' '@' FancyId
			{UnescapeSymbolValue();}
		};
		@[private] token Id @{
			( NormalId    {ParseIdValue(false);}
			| '@' FancyId {ParseIdValue(true);} )
			(	// If there's a string here, it's a custom literal, like regex"[0-9]+"
				{
					saveAndRestore(_startPosition);
					_startPosition = InputPosition;
					_type = TT.Literal;
				}
				(TQString / DQString)
			)?
		};
		@[private] token LettersOrPunc @{ '0'..'9'|'a'..'z'|'A'..'Z'|'_'|'#'|'\''
			|'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.'|'$' };

		// Punctuation & operators -----------------------------------------------
		
		@[private] token OpChar @{
			 '~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.'|'$' };
		@[extern] token NotOpChar @{
		  ~( '~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.'|'$' ) };
		@[private] token Comma     @{ ',' { _value = S.Comma; } };
		@[private] token Semicolon @{ ';' { _value = S.Semicolon; } };
		@[private] token At        @{ '@' { _value = GSymbol.Empty; } };
		@[private] token CommentStart @{ '/' ('/'|'*') };
		@[private] token Operator  @{ OpChar+ {ParseNormalOp();} };
		//[private] token BackslashOp @{ '\\' FancyId? {ParseBackslashOp();} };
		@[private] token LParen    @{
			{var prev = LA(-1);}
			{_type = prev == ' ' || prev == '\t' ? TT.SpaceLParen : TT.LParen;}
			'('
		};

		// Shebang ---------------------------------------------------------------

		@[private] token Shebang @{ "#!" ~('\r'|'\n')* Newline? };

		// Token -----------------------------------------------------------------

		@[k(3), public, override]
		token NextToken::Maybe!Token @{
			{	Spaces();
				_value = null;
				_textValue = default(UString); // aka @'default
				_style = 0;
				if LA0 == -1 { // EOF
					return NoValue.Value;
				};
				_startPosition = InputPosition;
			}
			( &{InputPosition == 0} 
			  {_type = TT.Shebang;}   Shebang
			/ {_type = TT.Literal;}   Symbol
			/ {_type = TT.Literal;}   Number
			/ {_type = TT.Id;}        Id
			/ {_type = TT.Newline;}   Newline   {_value = WhitespaceTag.Value;}
			/ {_type = TT.SLComment;} SLComment
			/ {_type = TT.MLComment;} MLComment
			/ {_type = TT.Literal;}   TQString
			/ {_type = TT.Literal;}   DQString
			/ {_type = TT.Literal;}   SQString
			/ {_type = TT.BQOperator;}BQOperator
			/ {_type = TT.Comma;}     Comma
			/ {_type = TT.Semicolon;} Semicolon
			/ {_type = TT.LParen;}    LParen
			/ {_type = TT.RParen;}    ')'
			/ {_type = TT.LBrack;}    '['
			/ {_type = TT.RBrack;}    ']'
			/ {_type = TT.LBrace;}    '{'
			/ {_type = TT.RBrace;}    '}'
			/ {_type = TT.At;}        At
			/                         Operator
			/ error { _value = @null; }
				( EOF {_type = TT.EOF;}
				| _   {_type = TT.Unknown;} )
			)
			{	Debug.Assert(InputPosition > _startPosition);
				return _current = (new Token(_type -> int, _startPosition, Text(), _style, _value, _textValue));
			}
		};

		// Partial tokens used for syntax highlighting. An LES syntax highlighter
		// can record the token continued in each line (''', """ or /*) call one
		// of these rules to proces that token until it ends or the line ends.
		
		@[k(3), public]
		token TDQStringLine::bool @{ nongreedy(_)* (Newline(true) {return false;} | '"' '"' '"' {return true;}) };
		@[k(3), public]
		token TSQStringLine::bool @{ nongreedy(_)* (Newline(true) {return false;} | "'''" {return true;}) };
		@[public]
		token MLCommentLine(ref nested::int)::bool @{ 
			(greedy
			  ( &{nested>0} "*/" {nested--;}
			  / "/*" {nested++;}
			  / ~('\r'|'\n'|'*')
			  / '*' (&!'/')
			  ))*
			(Newline(true) {return false;} | "*/" {return true;})
		};
	};
};
